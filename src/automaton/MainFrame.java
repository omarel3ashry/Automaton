package automaton;

import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultCellEditor;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Omar Elashry <3ashry>
 */
public class MainFrame extends javax.swing.JFrame {

    // This list contain the final states
    private ArrayList<Integer> currentFinal = new ArrayList<>();
    // This list contain dfa states
    private ArrayList<DfaState> dfaStateList = new ArrayList<>();
    // This list contain nfa states
    private ArrayList<NfaState> nfaStateList = new ArrayList<>();
    // This list contain converted nfa states
    private ArrayList<HyperDfa> hyperDfaStateList = new ArrayList<>();
    public static DefaultTableModel dfaTableModel;
    public static DefaultTableModel nfaTableModel;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        dfaTableModel = (DefaultTableModel) dfaTable.getModel();
        nfaTableModel = (DefaultTableModel) nfaTable.getModel();
        DeltaTableAlignment(dfaTable);
        DeltaTableAlignment(nfaTable);
        ((JLabel) dfaComboBox.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        toggleSubmitBtn.setEnabled(false);
        perfixTxtField.setEnabled(false);
        traceBtn.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dfaComboBox = new javax.swing.JComboBox<>();
        faModeRG = new javax.swing.ButtonGroup();
        statesDataPane = new javax.swing.JPanel();
        stateNumLabel = new javax.swing.JLabel();
        setNoBox = new javax.swing.JComboBox<>();
        initStateLabel = new javax.swing.JLabel();
        initStateBox = new javax.swing.JComboBox<>();
        finalStateLabel1 = new javax.swing.JLabel();
        finalStateBox = new javax.swing.JComboBox<>();
        finalStateLabel2 = new javax.swing.JLabel();
        currentFLabel = new javax.swing.JLabel();
        initStateLabel2 = new javax.swing.JLabel();
        currentInitLabel = new javax.swing.JLabel();
        toggleFStateBtn = new javax.swing.JToggleButton();
        dfaRB = new javax.swing.JRadioButton();
        nfaRB = new javax.swing.JRadioButton();
        nfaHintLabel = new javax.swing.JLabel();
        tablePane = new javax.swing.JPanel();
        toggleSubmitBtn = new javax.swing.JToggleButton();
        jTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        dfaTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        nfaTable = new javax.swing.JTable();
        tracingPane = new javax.swing.JPanel();
        perfixLabel = new javax.swing.JLabel();
        perfixTxtField = new javax.swing.JTextField();
        leadToLabel = new javax.swing.JLabel();
        currentLeadingLabel = new javax.swing.JLabel();
        traceBtn = new javax.swing.JButton();

        dfaComboBox.setMaximumRowCount(10);
        dfaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "q0", "q1", "q2", "q3" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        stateNumLabel.setText("State Set (Q) :");

        setNoBox.setMaximumRowCount(9);
        setNoBox.setModel(new javax.swing.DefaultComboBoxModel<>(new Integer[] { 2, 3, 4, 5, 6, 7, 8, 9, 10 }));
        setNoBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setNoBoxActionPerformed(evt);
            }
        });

        initStateLabel.setText("Initial State :");

        initStateBox.setMaximumRowCount(10);
        initStateBox.setModel(new javax.swing.DefaultComboBoxModel<>(new Integer[] { 0, 1 }));
        initStateBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initStateBoxActionPerformed(evt);
            }
        });

        finalStateLabel1.setText("Final States :");

        finalStateBox.setMaximumRowCount(10);
        finalStateBox.setModel(new javax.swing.DefaultComboBoxModel<>(new Integer[] { 0, 1 }));
        finalStateBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalStateBoxActionPerformed(evt);
            }
        });

        finalStateLabel2.setText("Final States :");

        initStateLabel2.setText("Initial State :");

        toggleFStateBtn.setText("+");
        toggleFStateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleFStateBtnActionPerformed(evt);
            }
        });

        faModeRG.add(dfaRB);
        dfaRB.setSelected(true);
        dfaRB.setText("DFA");

        faModeRG.add(nfaRB);
        nfaRB.setText("NFA");

        nfaHintLabel.setVisible(false);
        nfaHintLabel.setText("State value = null or q0,q1,q2... seperated by comma");

        javax.swing.GroupLayout statesDataPaneLayout = new javax.swing.GroupLayout(statesDataPane);
        statesDataPane.setLayout(statesDataPaneLayout);
        statesDataPaneLayout.setHorizontalGroup(
            statesDataPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statesDataPaneLayout.createSequentialGroup()
                .addGroup(statesDataPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statesDataPaneLayout.createSequentialGroup()
                        .addComponent(initStateLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentInitLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dfaRB))
                    .addGroup(statesDataPaneLayout.createSequentialGroup()
                        .addComponent(stateNumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(setNoBox, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(initStateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(initStateBox, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(finalStateLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(finalStateBox, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toggleFStateBtn)
                        .addGap(0, 8, Short.MAX_VALUE))
                    .addGroup(statesDataPaneLayout.createSequentialGroup()
                        .addComponent(finalStateLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentFLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nfaRB))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statesDataPaneLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(nfaHintLabel)))
                .addContainerGap())
        );
        statesDataPaneLayout.setVerticalGroup(
            statesDataPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statesDataPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statesDataPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stateNumLabel)
                    .addComponent(setNoBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(initStateLabel)
                    .addComponent(initStateBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finalStateLabel1)
                    .addComponent(finalStateBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toggleFStateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(statesDataPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(initStateLabel2)
                    .addComponent(currentInitLabel)
                    .addComponent(dfaRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statesDataPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finalStateLabel2)
                    .addComponent(currentFLabel)
                    .addComponent(nfaRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nfaHintLabel))
        );

        toggleSubmitBtn.setText("Submit");
        toggleSubmitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleSubmitBtnActionPerformed(evt);
            }
        });

        dfaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "State", "0", "1"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dfaTable.setRowHeight(23);
        dfaTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(dfaTable);
        if (dfaTable.getColumnModel().getColumnCount() > 0) {
            dfaTable.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(dfaComboBox));
            dfaTable.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(dfaComboBox));
        }

        jTabbedPane.addTab("DFA", jScrollPane1);

        nfaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "State", "0", "1"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        nfaTable.setRowHeight(23);
        jScrollPane2.setViewportView(nfaTable);

        jTabbedPane.addTab("NFA", jScrollPane2);

        javax.swing.GroupLayout tablePaneLayout = new javax.swing.GroupLayout(tablePane);
        tablePane.setLayout(tablePaneLayout);
        tablePaneLayout.setHorizontalGroup(
            tablePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePaneLayout.createSequentialGroup()
                .addGroup(tablePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
                    .addComponent(toggleSubmitBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        tablePaneLayout.setVerticalGroup(
            tablePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toggleSubmitBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        perfixLabel.setText("Perfix :");

        perfixTxtField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                perfixTxtFieldKeyTyped(evt);
            }
        });

        leadToLabel.setText("Lead to :");

        traceBtn.setText("Trace");
        traceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traceBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tracingPaneLayout = new javax.swing.GroupLayout(tracingPane);
        tracingPane.setLayout(tracingPaneLayout);
        tracingPaneLayout.setHorizontalGroup(
            tracingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tracingPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tracingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tracingPaneLayout.createSequentialGroup()
                        .addComponent(perfixLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(perfixTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(traceBtn))
                    .addGroup(tracingPaneLayout.createSequentialGroup()
                        .addComponent(leadToLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentLeadingLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tracingPaneLayout.setVerticalGroup(
            tracingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tracingPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tracingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(perfixLabel)
                    .addComponent(perfixTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(traceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tracingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leadToLabel)
                    .addComponent(currentLeadingLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablePane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(statesDataPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
            .addComponent(tracingPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statesDataPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tracingPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is called when the user select the number of states in the
     * automaton and according to the selected RadioButton (DFA-NFA) the table
     * populated and all variables reinitialized
     */
    private void setNoBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setNoBoxActionPerformed
        int setNo = (int) setNoBox.getSelectedItem();
        dfaStateList = new ArrayList<>();
        nfaStateList = new ArrayList<>();
        hyperDfaStateList = new ArrayList<>();
        currentFinal = new ArrayList<>();
        currentFLabel.setText("");
        initStateBox.removeAllItems();
        finalStateBox.removeAllItems();
        dfaComboBox.removeAllItems();

        if (nfaRB.isSelected()) {
            for (int i = 0; i < setNo; i++) {
                initStateBox.addItem(i);
                finalStateBox.addItem(i);

            }
            dfaTableModel.setRowCount(0);
            populateNFATable();
            jTabbedPane.setSelectedIndex(1);
            nfaHintLabel.setVisible(true);
        } else {
            for (int i = 0; i < setNo; i++) {
                initStateBox.addItem(i);
                finalStateBox.addItem(i);
                dfaComboBox.addItem("q" + i);
            }
            nfaTableModel.setRowCount(0);
            populateDFATable();
            jTabbedPane.setSelectedIndex(0);
            nfaHintLabel.setVisible(false);
        }

        toggleSubmitBtn.setEnabled(true);
    }//GEN-LAST:event_setNoBoxActionPerformed

    /**
     * Get the current selected state in initStateBox to be the initial state
     */
    private void initStateBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initStateBoxActionPerformed
        if (initStateBox.getSelectedItem() != null) {
            int initState = (int) initStateBox.getSelectedItem();
            currentInitLabel.setText(" (q" + initState + ") ");
        }
    }//GEN-LAST:event_initStateBoxActionPerformed

    /**
     * Populate the final state list from finalStateBox
     */
    private void finalStateBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalStateBoxActionPerformed
        if (finalStateBox.getSelectedItem() != null) {
            int finalState = (int) finalStateBox.getSelectedItem();
            if (currentFinal.isEmpty() || !currentFinal.contains(finalState)) {
                toggleFStateBtn.setSelected(false);
                toggleFStateBtn.setText("+");
            } else {
                toggleFStateBtn.setSelected(true);
                toggleFStateBtn.setText("-");
            }
        }
    }//GEN-LAST:event_finalStateBoxActionPerformed

    /**
     * Add or remove state from final state list
     */
    private void toggleFStateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleFStateBtnActionPerformed
        int finalState = (int) finalStateBox.getSelectedItem();
        if (toggleFStateBtn.isSelected()) {
            StringBuilder fBuilder = new StringBuilder();
            fBuilder.append(currentFLabel.getText());
            fBuilder.append(" (q").append(finalState).append(")");
            currentFLabel.setText(fBuilder.toString());
            currentFinal.add(finalState);
            toggleFStateBtn.setSelected(true);
            toggleFStateBtn.setText("-");
        } else {
            for (int i = 0; i < currentFinal.size(); i++) {
                if (currentFinal.get(i) == finalState) {
                    currentFinal.remove(i);
                }
            }
            StringBuilder fBuilder = new StringBuilder();
            for (int i = 0; i < currentFinal.size(); i++) {
                fBuilder.append(" (q").append(currentFinal.get(i)).append(")");
            }
            currentFLabel.setText(fBuilder.toString());
            toggleFStateBtn.setSelected(false);
            toggleFStateBtn.setText("+");
        }
    }//GEN-LAST:event_toggleFStateBtnActionPerformed

    /**
     * Submit all data to preform Regular Expressions on the automaton
     */
    private void toggleSubmitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleSubmitBtnActionPerformed
        if (toggleSubmitBtn.isSelected()) {
            if (dfaRB.isSelected()) {
                if (isAllDfaSet()) {
                    dfaStateList = new ArrayList<>();
                    toggleSubmitBtn.setText("Edit");
                    toggleSubmitBtn.setSelected(true);
                    int setNo = (int) setNoBox.getSelectedItem();
                    for (int i = 0; i < setNo; i++) {
                        int atZero = Integer.parseInt(dfaTableModel.getValueAt(i, 1).toString().replace("q", ""));
                        int atOne = Integer.parseInt(dfaTableModel.getValueAt(i, 2).toString().replace("q", ""));
                        DfaState state = new DfaState(i, ((int) initStateBox.getSelectedItem()) == i,
                                currentFLabel.getText().contains("(q" + i + ")"), atZero, atOne);
                        dfaStateList.add(state);
                    }
                    lockUi();
                } else {
                    toggleSubmitBtn.setText("Submit");
                    toggleSubmitBtn.setSelected(false);
                    JOptionPane.showMessageDialog(null, "Missing Data!");
                }
            } else if (nfaRB.isSelected()) {
                if (isAllNfaSet()) {
                    nfaStateList = new ArrayList<>();
                    hyperDfaStateList = new ArrayList<>();
                    toggleSubmitBtn.setText("Edit");
                    toggleSubmitBtn.setSelected(true);
                    convertN2D();
                    lockUi();
                    checkHyper();
                } else {
                    toggleSubmitBtn.setText("Submit");
                    toggleSubmitBtn.setSelected(false);
                    JOptionPane.showMessageDialog(null, "Missing Data!");
                }
            }
        } else {
            toggleSubmitBtn.setText("Submit");
            toggleSubmitBtn.setSelected(false);
            unlockUi();
        }
    }//GEN-LAST:event_toggleSubmitBtnActionPerformed

    /**
     * Get NFA state targets
     *
     * @param i - table row
     * @param col - table column (col = 1 , get targets at zero) (col = 2 , get
     * targets at one)
     * @return array of integers containing targets numbers or empty array if
     * null
     */
    private int[] getNfaStateTargets(int i, int col) throws NumberFormatException {
        int[] values;
        if (nfaTableModel.getValueAt(i, col).toString().trim().equals("null")) {
            values = new int[]{};
        } else {
            String[] atValueStrings = nfaTableModel.getValueAt(i, col).toString().trim().replace("q", "").split(",");
            values = new int[atValueStrings.length];
            for (int j = 0; j < atValueStrings.length; j++) {
                values[j] = Integer.parseInt(atValueStrings[j]);
            }
        }
        return values;
    }

    /**
     *
     * @param targets - NFA state list of targets (at zero or one)
     * @return targets in one string on form "q0,q1,..." or empty string if null
     */
    private String getNfaStateTargetsString(int[] targets) {
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < targets.length; i++) {
            builder.append("q").append(String.valueOf(targets[i]));
            if (i != targets.length - 1) {
                builder.append(",");
            }
        }
        return builder.toString();
    }

    /**
     * Convert the NFA to DFA Dive in with me to learn more about it xD
     */
    private void convertN2D() {
        // Get number of states
        int setNo = (int) setNoBox.getSelectedItem();
        // Populate nfaStateList from nfaTable
        for (int i = 0; i < setNo; i++) {
            int[] atZero = getNfaStateTargets(i, 1);
            int[] atOne = getNfaStateTargets(i, 2);
            NfaState state = new NfaState(i, ((int) initStateBox.getSelectedItem()) == i,
                    currentFLabel.getText().contains("(q" + i + ")"), atZero, atOne);
            nfaStateList.add(state);
        }
        // Get the initial state from nfaStateList
        // and add it to new empty Q (hyperDfaStateList)
        for (int i = 0; i < nfaStateList.size(); i++) {
            if (nfaStateList.get(i).isInitial()) {
                String atZero = getNfaStateTargetsString(nfaStateList.get(i).getAtZero()).isEmpty()
                        ? "q" + i : getNfaStateTargetsString(nfaStateList.get(i).getAtZero());
                String atOne = getNfaStateTargetsString(nfaStateList.get(i).getAtOne()).isEmpty()
                        ? "q" + i : getNfaStateTargetsString(nfaStateList.get(i).getAtOne());
                HyperDfa hyperDfa = new HyperDfa("q" + i, true, nfaStateList.get(i).isFinal(), atZero, atOne);
                hyperDfaStateList.add(hyperDfa);
            }
        }
        // while all targets of new DFA states
        // is not in Q (hyperDfaStateList) defineQstates
        while (!allZeroTargetsInQ() || !allOneTargetsInQ()) {
            defineQstates(hyperDfaStateList, hyperDfaStateList.size() - 1);
        }
    }

    /**
     *
     * @param hyperDfas - our Q (hyperDfaStateList)
     * @param at - index of state in Q to be defined so chunky so dive in with
     * me again xD
     */
    private void defineQstates(ArrayList<HyperDfa> hyperDfas, int at) {
        // Get the state in Q to be defined
        HyperDfa hyperDfa = hyperDfas.get(at);
        // Check if this state really its targets should be defined
        // else decrease (at) value to recurse again with different
        // state in Q
        if (!targetAtZeroExistInQ(hyperDfa.getAtZero())
                || !targetAtOneExistInQ(hyperDfa.getAtOne())) {

            // Check if the zero target is missing from Q
            // if so, new DFA state (hyperDfa) will be created for it
            if (!targetAtZeroExistInQ(hyperDfa.getAtZero())) {
                boolean isFinal = false;
                StringBuilder zeroBuilder = new StringBuilder();
                StringBuilder oneBuilder = new StringBuilder();

                // Check every NFA state in nfaStateList if this state in our target or not
                // if so, we get its target to be defined in new DFA state (hyperDfa) targets
                for (NfaState nfaState : nfaStateList) {
                    isFinal = hyperDfa.getAtZero().contains(String.valueOf(nfaState.getNum())) && nfaState.isFinal();
                    if (hyperDfa.getAtZero().contains(String.valueOf(nfaState.getNum()))) {
                        if (nfaState.getAtZero().length != 0) {
                            if (zeroBuilder.toString().isEmpty()) {
                                zeroBuilder.append(getNfaStateTargetsString(nfaState.getAtZero()));
                            } else {
                                zeroBuilder.append(removeDuplicates(zeroBuilder.toString(),
                                        getNfaStateTargetsString(nfaState.getAtZero())));
                            }
                        }
                        if (nfaState.getAtOne().length != 0) {
                            if (oneBuilder.toString().isEmpty()) {
                                oneBuilder.append(getNfaStateTargetsString(nfaState.getAtOne()));
                            } else {
                                oneBuilder.append(removeDuplicates(oneBuilder.toString(),
                                        getNfaStateTargetsString(nfaState.getAtOne())));
                            }
                        }
                    }
                }
                // if the new DFA state (hyperDfa) have no targets at zero so it targets its self
                String atZero = zeroBuilder.toString().isEmpty() ? hyperDfa.getAtZero() : zeroBuilder.toString();
                // if the new DFA state (hyperDfa) have no targets at one so it targets its self
                String atOne = oneBuilder.toString().isEmpty() ? hyperDfa.getAtZero() : oneBuilder.toString();
                // define the new DFA state (hyperDfa) values ( number,isInitial, isFinal, target at zero, target at one)
                HyperDfa newHyperDfa = new HyperDfa(hyperDfa.getAtZero(), false, isFinal,
                        atZero, atOne);
                // add it to Q (hyperDfaStateList)
                hyperDfaStateList.add(newHyperDfa);
            }
            // Check if the one target is missing from Q
            // if so, new DFA state (hyperDfa) will be created for it
            // same logic as before
            if (!targetAtOneExistInQ(hyperDfa.getAtOne())) {
                boolean isFinal = false;
                StringBuilder zeroBuilder = new StringBuilder();
                StringBuilder oneBuilder = new StringBuilder();
                for (NfaState nfaState : nfaStateList) {
                    isFinal = hyperDfa.getAtOne().contains(String.valueOf(nfaState.getNum())) && nfaState.isFinal();
                    if (hyperDfa.getAtOne().contains(String.valueOf(nfaState.getNum()))) {
                        if (nfaState.getAtZero().length != 0) {
                            if (zeroBuilder.toString().isEmpty()) {
                                zeroBuilder.append(getNfaStateTargetsString(nfaState.getAtZero()));
                            } else {

                                zeroBuilder.append(removeDuplicates(zeroBuilder.toString(),
                                        getNfaStateTargetsString(nfaState.getAtZero())));
                            }
                        }
                        if (nfaState.getAtOne().length != 0) {
                            if (oneBuilder.toString().isEmpty()) {
                                oneBuilder.append(getNfaStateTargetsString(nfaState.getAtOne()));
                            } else {
                                oneBuilder.append(removeDuplicates(oneBuilder.toString(),
                                        getNfaStateTargetsString(nfaState.getAtOne())));
                            }
                        }
                    }
                }
                String atZero = zeroBuilder.toString().isEmpty() ? hyperDfa.getAtOne() : zeroBuilder.toString();
                String atOne = oneBuilder.toString().isEmpty() ? hyperDfa.getAtOne() : oneBuilder.toString();
                HyperDfa newHyperDfa = new HyperDfa(hyperDfa.getAtOne(), false, isFinal,
                        atZero, atOne);
                hyperDfaStateList.add(newHyperDfa);
            }
        } else {
            // if target at zero and one already in Q, recurse again with previous index
            defineQstates(hyperDfas, at - 1);
        }

    }

    /**
     * Compare the returned string of targets from "getNfaStateTargetsString"
     * method with the string that we appending to it
     *
     * @param base - current string (the string that we append to it)
     * @param s - string to be checked if have duplicates
     * @return string without duplicates or empty string if all duplicate
     */
    private String removeDuplicates(String base, String s) {
        String[] targets = s.split(",");
        ArrayList<String> targetList = new ArrayList<>(Arrays.asList(targets));
        for (int i = 0; i < targets.length; i++) {
            if (base.contains(targets[i])) {
                targetList.remove(targets[i]);
            }
        }
        StringBuilder builder = new StringBuilder();
        if (!targetList.isEmpty()) {
            targetList.forEach((t) -> {
                builder.append(",").append(t);
            });
        }
        return builder.toString();
    }

    /**
     * Check if all zero targets of Q's state (hyperDfaStateList) already is
     * state in Q or not
     *
     * @return true or false
     */
    private boolean allZeroTargetsInQ() {
        StringBuilder checkBuilder = new StringBuilder();
        for (int i = 0; i < hyperDfaStateList.size(); i++) {
            for (int j = 0; j < hyperDfaStateList.size(); j++) {
                if (hyperDfaStateList.get(i).getAtZero().equals(hyperDfaStateList.get(j).getNum())) {
                    checkBuilder.append("t");
                } else {
                    checkBuilder.append("f");
                }
            }
        }
        // count how many times we get true
        int count = checkBuilder.toString().length() - checkBuilder.toString().replaceAll("t", "").length();
        // if count = Q size this means every target of Q is defined as state
        return count == hyperDfaStateList.size();
    }

    /**
     * Check if all one targets of Q's state (hyperDfaStateList) already is
     * state in Q or not
     *
     * @return true or false
     */
    private boolean allOneTargetsInQ() {
        StringBuilder checkBuilder = new StringBuilder();
        for (int i = 0; i < hyperDfaStateList.size(); i++) {
            for (int j = 0; j < hyperDfaStateList.size(); j++) {
                if (hyperDfaStateList.get(i).getAtOne().equals(hyperDfaStateList.get(j).getNum())) {
                    checkBuilder.append("t");
                } else {
                    checkBuilder.append("f");
                }
            }
        }
        // count how many times we get true
        int count = checkBuilder.toString().length() - checkBuilder.toString().replaceAll("t", "").length();
        // if count = Q size this means every target of Q is defined as state
        return count == hyperDfaStateList.size();
    }

    /**
     * Check a single target already is state in Q or not
     *
     * @return true or false
     */
    private boolean targetAtZeroExistInQ(String target) {
        for (int i = 0; i < hyperDfaStateList.size(); i++) {
            if (target.equals(hyperDfaStateList.get(i).getNum())) {
                return true;
            }
        }
        return false;
    }

    /**
     * Check a single target already is state in Q or not
     *
     * @return true or false
     */
    private boolean targetAtOneExistInQ(String target) {
        for (int i = 0; i < hyperDfaStateList.size(); i++) {
            if (target.equals(hyperDfaStateList.get(i).getNum())) {
                return true;
            }
        }
        return false;
    }

    // prevent typing any text in the perfixTxtField otherthan 0 or 1
    private void perfixTxtFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_perfixTxtFieldKeyTyped
        char c = evt.getKeyChar();
        if (!((c == KeyEvent.VK_1) || (c == KeyEvent.VK_0))) {
            evt.consume();
        }
    }//GEN-LAST:event_perfixTxtFieldKeyTyped

    // Tracing the automaton with given regular expression
    private void traceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traceBtnActionPerformed

        // Convert the given RE to array of int
        char[] charArray = perfixTxtField.getText().toCharArray();
        int[] ints = new int[charArray.length];
        for (int i = 0; i < charArray.length; i++) {
            try {
                String s = String.valueOf(charArray[i]);
                ints[i] = Integer.parseInt(s);
            } catch (NumberFormatException nfe) {
                //Not an integer 
            }
        }
        if (dfaRB.isSelected()) {
            // Search for the initialState to begin with
            DfaState initialState = new DfaState();
            int stateIndex = 0;
            for (int i = 0; i < dfaStateList.size(); i++) {
                if (dfaStateList.get(i).isInitial()) {
                    initialState = dfaStateList.get(i);
                    stateIndex = i;
                }
            }
            int current = initialState.getNum();
            int target0 = initialState.getAtZero();
            int target1 = initialState.getAtOne();
            for (int i = 0; i < ints.length; i++) {
                outer:
                for (int j = 0; j < dfaStateList.size(); j++) {
                    if (ints[i] == 0 && dfaStateList.get(j).getNum() == target0) {
                        current = dfaStateList.get(j).getNum();
                        target0 = dfaStateList.get(j).getAtZero();
                        target1 = dfaStateList.get(j).getAtOne();
                        stateIndex = j;
                        break outer;
                    } else if (ints[i] == 1 && dfaStateList.get(j).getNum() == target1) {
                        current = dfaStateList.get(j).getNum();
                        target0 = dfaStateList.get(j).getAtZero();
                        target1 = dfaStateList.get(j).getAtOne();
                        stateIndex = j;
                        break outer;
                    }
                }
            }
            currentLeadingLabel.setFont(new Font(Font.DIALOG, Font.BOLD, 12));
            if (dfaStateList.get(stateIndex).isFinal()) {
                currentLeadingLabel.setText("q" + current + "  (final state)");
                Color darkGreen = Color.decode("#20BD13");
                currentLeadingLabel.setForeground(darkGreen);
            } else {
                currentLeadingLabel.setText("q" + current + "  (not final state)");
                currentLeadingLabel.setForeground(Color.red);
            }
        } else if (nfaRB.isSelected()) {
            // We already knew that the initial state is the first element in Q
            HyperDfa initialHyperState = hyperDfaStateList.get(0);
            String current = initialHyperState.getNum();
            String target0 = initialHyperState.getAtZero();
            String target1 = initialHyperState.getAtOne();
            for (int i = 0; i < ints.length; i++) {
                outer:
                for (int j = 0; j < hyperDfaStateList.size(); j++) {
                    if (ints[i] == 0 && hyperDfaStateList.get(j).getNum().equals(target0)) {
                        current = hyperDfaStateList.get(j).getNum();
                        target0 = hyperDfaStateList.get(j).getAtZero();
                        target1 = hyperDfaStateList.get(j).getAtOne();
                        break outer;
                    } else if (ints[i] == 1 && hyperDfaStateList.get(j).getNum().equals(target1)) {
                        current = hyperDfaStateList.get(j).getNum();
                        target0 = hyperDfaStateList.get(j).getAtZero();
                        target1 = hyperDfaStateList.get(j).getAtOne();
                        break outer;
                    }
                }
            }
            currentLeadingLabel.setFont(new Font(Font.DIALOG, Font.BOLD, 12));
            boolean isFinal = false;
            for (HyperDfa hd : hyperDfaStateList) {
                if (current.equals(hd.getNum())) {
                    isFinal = hd.isFinal();
                }
            }
            if (isFinal) {
                currentLeadingLabel.setText(current + "  (final state)");
                Color darkGreen = Color.decode("#20BD13");
                currentLeadingLabel.setForeground(darkGreen);
            } else {
                currentLeadingLabel.setText(current + "  (not final state)");
                currentLeadingLabel.setForeground(Color.red);
            }
        }


    }//GEN-LAST:event_traceBtnActionPerformed

    private void lockUi() {
        setNoBox.setEnabled(false);
        initStateBox.setEnabled(false);
        finalStateBox.setEnabled(false);
        toggleFStateBtn.setEnabled(false);
        dfaTable.getSelectionModel().clearSelection();
        dfaTable.setEnabled(false);
        perfixTxtField.setEnabled(true);
        traceBtn.setEnabled(true);
    }

    private void unlockUi() {
        setNoBox.setEnabled(true);
        initStateBox.setEnabled(true);
        finalStateBox.setEnabled(true);
        toggleFStateBtn.setEnabled(true);
        dfaTable.setEnabled(true);
        perfixTxtField.setEnabled(false);
        traceBtn.setEnabled(false);
    }

    /**
     * print normal DFA states
     *
     * stateName | isInitial | isFinal | 0 | 1 | | | | | | | |
     */
    private void check() {
        System.out.println("stateName | isInitial | isFinal | 0 | 1");
        for (int i = 0; i < dfaStateList.size(); i++) {
            System.out.println(dfaStateList.get(i).getNum() + "|"
                    + dfaStateList.get(i).isInitial() + "|"
                    + dfaStateList.get(i).isFinal() + "|"
                    + dfaStateList.get(i).getAtZero() + "|"
                    + dfaStateList.get(i).getAtOne());
        }
    }

    /**
     * print Q states (converted NFA)
     *
     * stateName | isInitial | isFinal | 0 | 1 | | | | | | | |
     */
    private void checkHyper() {
        System.out.println("stateName | isInitial | isFinal | 0 | 1");
        for (int i = 0; i < hyperDfaStateList.size(); i++) {
            System.out.println(hyperDfaStateList.get(i).getNum() + "|"
                    + hyperDfaStateList.get(i).isInitial() + "|"
                    + hyperDfaStateList.get(i).isFinal() + "|"
                    + hyperDfaStateList.get(i).getAtZero() + "|"
                    + hyperDfaStateList.get(i).getAtOne());
        }
    }

    // Check if all dfa data is set or there is missing data
    private boolean isAllDfaSet() {
        for (int i = 0; i < dfaTableModel.getRowCount(); i++) {
            if (dfaTableModel.getValueAt(i, 1) == null
                    || dfaTableModel.getValueAt(i, 2) == null
                    || currentFLabel.getText().trim().isEmpty()) {
                return false;
            }
        }
        return true;
    }

    // Check if all nfa data is set or there is missing data
    private boolean isAllNfaSet() {
        for (int i = 0; i < nfaTableModel.getRowCount(); i++) {
            if (nfaTableModel.getValueAt(i, 1) == null
                    || nfaTableModel.getValueAt(i, 1).toString().isEmpty()
                    || nfaTableModel.getValueAt(i, 2) == null
                    || nfaTableModel.getValueAt(i, 2).toString().isEmpty()
                    || currentFLabel.getText().trim().isEmpty()) {
                return false;
            }
        }
        return true;
    }

    private void populateDFATable() {
        dfaTableModel.setRowCount(0);
        Object[] rowData = new Object[1];
        for (int i = 0; i < (int) setNoBox.getSelectedItem(); i++) {
            rowData[0] = "q" + i;
            dfaTableModel.addRow(rowData);
        }
    }

    private void populateNFATable() {
        nfaTableModel.setRowCount(0);
        Object[] rowData = new Object[1];
        for (int i = 0; i < (int) setNoBox.getSelectedItem(); i++) {
            rowData[0] = "q" + i;
            nfaTableModel.addRow(rowData);
        }
    }

    // Just text alignment and styling
    private void DeltaTableAlignment(JTable jTable) {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        jTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        jTable.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        jTable.getColumnModel().getColumn(0).setCellRenderer(new TableCellRenderer());
        // deltaTable.setDefaultRenderer(String.class, centerRenderer);
        jTable.getColumnModel().getColumn(0).setHeaderRenderer(new HorizAlignHeaderRenderer());
        jTable.getColumnModel().getColumn(1).setHeaderRenderer(new HorizAlignHeaderRenderer());
        jTable.getColumnModel().getColumn(2).setHeaderRenderer(new HorizAlignHeaderRenderer());

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currentFLabel;
    private javax.swing.JLabel currentInitLabel;
    private javax.swing.JLabel currentLeadingLabel;
    private javax.swing.JComboBox<String> dfaComboBox;
    private javax.swing.JRadioButton dfaRB;
    private javax.swing.JTable dfaTable;
    private javax.swing.ButtonGroup faModeRG;
    private javax.swing.JComboBox<Integer> finalStateBox;
    private javax.swing.JLabel finalStateLabel1;
    private javax.swing.JLabel finalStateLabel2;
    private javax.swing.JComboBox<Integer> initStateBox;
    private javax.swing.JLabel initStateLabel;
    private javax.swing.JLabel initStateLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JLabel leadToLabel;
    private javax.swing.JLabel nfaHintLabel;
    private javax.swing.JRadioButton nfaRB;
    private javax.swing.JTable nfaTable;
    private javax.swing.JLabel perfixLabel;
    private javax.swing.JTextField perfixTxtField;
    private javax.swing.JComboBox<Integer> setNoBox;
    private javax.swing.JLabel stateNumLabel;
    private javax.swing.JPanel statesDataPane;
    private javax.swing.JPanel tablePane;
    private javax.swing.JToggleButton toggleFStateBtn;
    private javax.swing.JToggleButton toggleSubmitBtn;
    private javax.swing.JButton traceBtn;
    private javax.swing.JPanel tracingPane;
    // End of variables declaration//GEN-END:variables
}
